"""
Django settings for RiseAboveSilence project.

Generated by 'django-admin startproject' using Django 4.2.21.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

import cloudinary
from django.templatetags.static import static
from django.urls import reverse_lazy
from dotenv import load_dotenv
from decouple import config

load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", config("SECRET_KEY"))
DEBUG = os.getenv("DEBUG", config("DEBUG")) == "True"
GOOGLE_MAPS_API_KEY = os.getenv("GOOGLE_MAPS_API_KEY", config("GOOGLE_MAPS_API_KEY"))

ALLOWED_HOSTS = config("ALLOWED_HOSTS", default="").split(",")
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS]

CSRF_TRUSTED_ORIGINS = os.getenv(
    "CSRF_TRUSTED_ORIGINS", config("CSRF_TRUSTED_ORIGINS", [])
).split(",")


# Application definition

MY_APPS = [
    "RiseAboveSilence.accounts",
    "RiseAboveSilence.common",
    "RiseAboveSilence.posts",
]

INSTALLED_APPS = [
    "unfold",
    "django.contrib.admin",
    "unfold.contrib.forms",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "cloudinary",
    "cloudinary_storage",
    "django_countries",
    "django_extensions",
    "rest_framework",
] + MY_APPS

UNFOLD = {
    "SITE_TITLE": "My Admin",
    "SITE_HEADER": "My Admin Panel",
    "SITE_URL": "/",
    "SHOW_COUNTS": True,
    "COLLAPSIBLE_NAV": True,
    "SITE_ICON": {
        "dark": lambda request: static("icon-dark.svg"),
    },
    "SITE_LOGO": {
        "dark": lambda request: static("logo-dark.svg"),
    },
}

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticatedOrReadOnly",
    ],
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "RiseAboveSilence.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "RiseAboveSilence.common.context_processors.google_maps_api_key",
            ],
        },
    },
]

WSGI_APPLICATION = "RiseAboveSilence.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME", config("DB_NAME")),
        "USER": os.getenv("DB_USER", config("DB_USER")),
        "PASSWORD": os.getenv("DB_PASSWORD", config("DB_PASSWORD")),
        "HOST": os.getenv("DB_HOST", config("DB_HOST")),
        "PORT": os.getenv("DB_PORT", config("DB_PORT")),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

STATICFILES_DIRS = (BASE_DIR / "static",)

STATIC_ROOT = BASE_DIR / "staticfiles"

CLOUDINARY_STORAGE = {
    "CLOUD_NAME": config("CLOUDINARY_NAME"),
    "API_KEY": config("CLOUDINARY_API_KEY"),
    "API_SECRET": config("CLOUDINARY_API_SECRET"),
}

cloudinary.config(
    cloud_name=config("CLOUDINARY_CLOUD_NAME"),
    api_key=config("CLOUDINARY_API_KEY"),
    api_secret=config("CLOUDINARY_API_SECRET"),
)

DEFAULT_FILE_STORAGE = "cloudinary_storage.storage.MediaCloudinaryStorage"

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "accounts.CustomUser"
LOGIN_REDIRECT_URL = reverse_lazy("index")
LOGOUT_REDIRECT_URL = reverse_lazy("index")

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

EMAIL_HOST = os.getenv("EMAIL_HOST", config("EMAIL_HOST"))
EMAIL_PORT = os.getenv("EMAIL_PORT", config("EMAIL_PORT"))
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", config("EMAIL_HOST_USER"))
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", config("EMAIL_HOST_PASSWORD"))
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", config("EMAIL_USE_TLS")) == "True"
COMPANY_EMAIL = os.getenv("COMPANY_EMAIL", config("COMPANY_EMAIL"))
